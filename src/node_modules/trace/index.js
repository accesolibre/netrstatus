var config = require('config')
var url = require('url')
var exec = require('child_process').exec
var os = require('os')

function parseHops (hops) {
  var result = []
  var hop = {}
  var neutral = false

  function saveHop () {
    result.push(hop)
    hop = {}
  }

  hops.forEach(function (item, idx) {
    if (neutral) {
      neutral = false
    } else {
      if (hops[idx + 1] !== 'ms' && hops[idx + 1] !== undefined) {
        if (idx !== 0) { saveHop() }
        hop.fqdn = item
        hop.ip = hops[idx + 1].replace(/\(/, '').replace(/\)/, '')
      } else {
        if (!hop.trips) { hop.trips = [] }
        hop.trips.push(item)
      }
      neutral = true
    }
  })

  saveHop()

  return result
}

function parse (probes) {
  probes = probes.split('\n')
    .filter(function (probe) {
      return !(/\* \* \*/.test(probe)) && probe
    })
    .map(function (probe) { return probe.replace(/\*/, '0') })
    .map(function (probe) { return probe.replace(/^ /, '') })
  probes = probes
        .map(function (i, idx) {
          if (/^\d+/.test(i)) {
            if (probes[idx + 1] === undefined || /^\d+/.test(probes[idx + 1])) {
              return i
            } else {
              var pos = idx + 1

              while (!/^\d+/.test(probes[pos]) && pos < idx + 5) {
                i += ' ' + probes[pos]
                pos += 1
              }

              return i
            }
          } else {
            return null
          }
        })
        .filter(function (i) { return i !== null })
  return probes
        .map(function (probe) {
          probe = probe.split(' ').filter(function (i) { return i !== '' })
          return {
            probe: probe[0],
            hops: parseHops(probe.slice(1))
          }
        })
}

function runTrace (opts, callback) {
  var local = {}
  local.uri = opts.url || opts.uri
  local.host = url.parse(local.uri).host
  local.timeout = opts.timeout || config.trace.timeout
  if (os.type() === 'Windows_NT') {
    local.cmd = 'tracert -w ' + local.timeout +
    ' ' + local.host
  } else {
    local.cmd = 'traceroute -w ' + local.timeout +
    ' ' + local.host    
  }
  
  exec(local.cmd, function (err, stdout) {
    if (err) { return callback(err) }

    return callback(null, parse(stdout))
  })
}
module.exports = runTrace
